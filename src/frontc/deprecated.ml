(*  inherit nopCabsVisitor                                                                           *)
(*  method vexpr exp = match exp with                                                                *)
(*    | BINARY(ASSIGN,VARIABLE v,CAST(specDecl,SINGLE_INIT(CALL(VARIABLE call,([                     *)
(*      (BINARY(MUL,n,(TYPE_SIZEOF _ as size)) | BINARY(MUL,(TYPE_SIZEOF _ as size),n))              *)
(*      ] as exps)))))                                                                               *)
(*        when call = "__builtin_alloca" ->                                                          *)
(*      E.log "%s\n" v;                                                                              *)
(*      addRefList v vars;                                                                           *)
(*      ChangeTo (BINARY(ASSIGN,VARIABLE v,CAST(specDecl,SINGLE_INIT(CALL(VARIABLE "malloc",exps)))))*)
(*    | _ -> DoChildren                                                                              *)
(*end                                                                                                *)

(*      if !instrFunc then                                                                               *)
(*        let flagVarsDef = declare_flags [SpecType Tint] ["__prof_" ^ show_plain_cabs_name name ] loc in*)
(*          ChangeDoChildrenPost ([def],map (                                                            *)
(*            function FUNDEF (sn,blk,loc,loc') ->                                                       *)
(*              FUNDEF(sn,{blk with bstmts = flagVarsDef :: blk.bstmts},loc,loc')                        *)
(*                    | x -> x))                                                                         *)
(*      else                                                                                             *)
(*        DoChildren                                                                                     *)

(*                  *)
(*let locUnknown = {*)
(* lineno = -1;     *)
(* filename = "";   *)
(* byteno = -1;     *)
(* ident = -1;      *)
(*}                 *)
